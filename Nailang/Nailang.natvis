<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="xziar::nailang::tokenizer::KeyCharTokenizer&lt;*&gt;">
    <DisplayString>KeyCharTokenizer</DisplayString>
  </Type>
  <Type Name="xziar::nailang::tokenizer::ParentheseTokenizer">
    <DisplayString>ParentheseTokenizer</DisplayString>
  </Type>
  <Type Name="xziar::nailang::tokenizer::CurlyBraceTokenizer">
    <DisplayString>CurlyBraceTokenizer</DisplayString>
  </Type>
  <Type Name="xziar::nailang::tokenizer::PrefixedTokenizer&lt;*&gt;">
    <DisplayString>PrefixedTokenizer [{$T1,c}]</DisplayString>
  </Type>
  <Type Name="xziar::nailang::tokenizer::BlockPrefixTokenizer">
    <DisplayString>BlockPrefixTokenizer</DisplayString>
  </Type>
  <Type Name="xziar::nailang::tokenizer::FuncPrefixTokenizer&lt;*,*&gt;">
    <DisplayString>FuncPrefixTokenizer [{$T1,c}]</DisplayString>
  </Type>
  <Type Name="xziar::nailang::tokenizer::MetaFuncPrefixTokenizer">
    <DisplayString>MetaFuncPrefixTokenizer</DisplayString>
  </Type>
  <Type Name="xziar::nailang::tokenizer::NormalFuncPrefixTokenizer">
    <DisplayString>NormalFuncPrefixTokenizer</DisplayString>
  </Type>
  <Type Name="xziar::nailang::tokenizer::VariableTokenizer">
    <DisplayString>VariableTokenizer</DisplayString>
  </Type>
  <Type Name="xziar::nailang::tokenizer::EmbedOpTokenizer">
    <DisplayString>EmbedOpTokenizer</DisplayString>
  </Type>
  <Type Name="xziar::nailang::tokenizer::AssignOpTokenizer">
    <DisplayString>AssignOpTokenizer</DisplayString>
  </Type>
  <Type Name="xziar::nailang::LateBindVar">
    <DisplayString>{{ Var[{Name,s32}] }}</DisplayString>
  </Type>
  <Type Name="xziar::nailang::FuncCall">
    <DisplayString>{{ FuncCall[{Name,s32}, {Args.storage_.size_} args] }}</DisplayString>
    <Expand>
      <Item Name="[FuncName]">Name</Item>
      <ArrayItems>
        <Size>Args.storage_.size_</Size>
        <ValuePointer>Args.storage_.data_</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="xziar::nailang::UnaryExpr">
    <DisplayString>{{ Unary[{Operator,en}] }}</DisplayString>
  </Type>
  <Type Name="xziar::nailang::BinaryExpr">
    <DisplayString>{{ Binary[{Operator,en}] }}</DisplayString>
  </Type>
  <Type Name="xziar::nailang::Assignment">
    <DisplayString>{{ Assignment[{&amp;Variable_[0],[Variable_._Mysize / 2]s32}] }}</DisplayString>
    <Expand>
      <Item Name="Variable">&amp;Variable_[0],[Variable_._Mysize / 2]s32</Item>
      <Item Name="Statement">Statement</Item>
    </Expand>
  </Type>
  <Type Name="xziar::nailang::RawArg" >
    <DisplayString Condition="TypeData == xziar::nailang::RawArg::Type::Empty" >{{ Empty }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::RawArg::Type::Func"  >{{ Func [{*reinterpret_cast&lt;const xziar::nailang::FuncCall*&gt;(Data1.Uint)}] }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::RawArg::Type::Unary" >{{ Unary }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::RawArg::Type::Binary">{{ Binary }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::RawArg::Type::Var"   >{{ Var [{reinterpret_cast&lt;const char32_t*&gt;(Data1.Uint),[Data2]s32}] }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::RawArg::Type::Str"   >{{ Str [{reinterpret_cast&lt;const char32_t*&gt;(Data1.Uint),[Data2]s32}] }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::RawArg::Type::Uint"  >{{ Uint [{Data1.Uint}] }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::RawArg::Type::Int"   >{{ Int [{static_cast&lt;int64_t&gt;(Data1.Uint)}] }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::RawArg::Type::FP"    >{{ FP [{Data1.FP}] }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::RawArg::Type::Bool"  >{{ Bool [{Data1.Uint == 1}] }}</DisplayString>
    <Expand>
      <Item Condition="TypeData == xziar::nailang::RawArg::Func"   Name="[Func]"  >*reinterpret_cast&lt;const xziar::nailang::FuncCall*&gt;(Data1.Uint)</Item>
      <Item Condition="TypeData == xziar::nailang::RawArg::Unary"  Name="[Unary]" >*reinterpret_cast&lt;const xziar::nailang::UnaryExpr*&gt;(Data1.Uint)</Item>
      <Item Condition="TypeData == xziar::nailang::RawArg::Binary" Name="[Binary]">*reinterpret_cast&lt;const xziar::nailang::BinaryExpr*&gt;(Data1.Uint)</Item>
    </Expand>
  </Type>
  <Type Name="xziar::nailang::Arg" >
    <DisplayString Condition="TypeData == xziar::nailang::Arg::InternalType::Empty" >{{ Empty }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::Arg::InternalType::Var"   >{{ Var [{Str,s32}] }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::Arg::InternalType::U32Str">{{ Str [{Str,s32}] }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::Arg::InternalType::U32Sv" >{{ Str [{reinterpret_cast&lt;const char32_t*&gt;(Data1.Uint),[Data2]s32}] }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::Arg::InternalType::Uint"  >{{ Uint [{Data1.Uint}] }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::Arg::InternalType::Int"   >{{ Int [{static_cast&lt;int64_t&gt;(Data1.Uint)}] }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::Arg::InternalType::FP"    >{{ FP [{Data1.FP}] }}</DisplayString>
    <DisplayString Condition="TypeData == xziar::nailang::Arg::InternalType::Bool"  >{{ Bool [{Data1.Uint == 1}] }}</DisplayString>
  </Type>
  <Type Name="xziar::nailang::BlockContent">
    <DisplayString Condition="(Pointer &amp; 0x3) == Type::Assignment" >{{ Assignment }}</DisplayString>
    <DisplayString Condition="(Pointer &amp; 0x3) == Type::FuncCall"   >{{ FuncCall }}</DisplayString>
    <DisplayString Condition="(Pointer &amp; 0x3) == Type::RawBlock"   >{{ RawBlock }}</DisplayString>
    <DisplayString Condition="(Pointer &amp; 0x3) == Type::Block"      >{{ Block }}</DisplayString>
    <Expand>
      <Item Condition="(Pointer &amp; 0x3) == Type::Assignment" Name="[Assignment]">*reinterpret_cast&lt;const xziar::nailang::Assignment*&gt;(Pointer &amp; ~(uintptr_t)(0x3))</Item>
      <Item Condition="(Pointer &amp; 0x3) == Type::FuncCall"   Name="[FuncCall]"  >*reinterpret_cast&lt;const xziar::nailang::FuncCall*&gt;(Pointer &amp; ~(uintptr_t)(0x3))</Item>
      <Item Condition="(Pointer &amp; 0x3) == Type::RawBlock"   Name="[RawBlock]"  >*reinterpret_cast&lt;const xziar::nailang::RawBlock*&gt;(Pointer &amp; ~(uintptr_t)(0x3))</Item>
      <Item Condition="(Pointer &amp; 0x3) == Type::Block"      Name="[Block]"     >*reinterpret_cast&lt;const xziar::nailang::Block*&gt;(Pointer &amp; ~(uintptr_t)(0x3))</Item>
    </Expand>
  </Type>
  <Type Name="xziar::nailang::RawBlock">
    <DisplayString>{{ RawBlock[{Name,s32}] }}</DisplayString>
  </Type>
  <Type Name="xziar::nailang::Block">
    <DisplayString>{{ Block[{Name,s32}] {Content.storage_.size_} insts }}</DisplayString>
    <Expand>
      <Synthetic Name="Insts">
        <Expand>
          <IndexListItems>
            <Size>Content.storage_.size_</Size>
            <ValueNode Condition="(Content[$i].Pointer &amp; 0x3) == xziar::nailang::BlockContent::Type::Assignment">*reinterpret_cast&lt;const xziar::nailang::Assignment*&gt;(Content[$i].Pointer &amp; ~(uintptr_t)(0x3))</ValueNode>
            <ValueNode Condition="(Content[$i].Pointer &amp; 0x3) == xziar::nailang::BlockContent::Type::FuncCall"  >*reinterpret_cast&lt;const xziar::nailang::FuncCall*&gt;  (Content[$i].Pointer &amp; ~(uintptr_t)(0x3))</ValueNode>
            <ValueNode Condition="(Content[$i].Pointer &amp; 0x3) == xziar::nailang::BlockContent::Type::RawBlock"  >*reinterpret_cast&lt;const xziar::nailang::RawBlock*&gt;  (Content[$i].Pointer &amp; ~(uintptr_t)(0x3))</ValueNode>
            <ValueNode Condition="(Content[$i].Pointer &amp; 0x3) == xziar::nailang::BlockContent::Type::Block"     >*reinterpret_cast&lt;const xziar::nailang::Block*&gt;     (Content[$i].Pointer &amp; ~(uintptr_t)(0x3))</ValueNode>
          </IndexListItems>
        </Expand>
      </Synthetic>
      <Synthetic Name="Metas">
        <Expand>
          <IndexListItems>
            <Size>Content.storage_.size_</Size>
            <ValueNode Condition="Content[$i].Count &gt; 0">&amp;MetaFuncations[Content[$i].Offset],[Content[$i].Count]</ValueNode>
          </IndexListItems>
          
          <!--<CustomListItems MaxItemsPerView="100">
            <Variable Name="idx" InitialValue="0" />
            <Size>Content.storage_.size_</Size>
            <Loop>
              <Break Condition="idx &gt;= Content.storage_.size_" />
              <Item>MetaFuncations.subspan(Content[idx].Offset, Content[idx].Count)</Item>
              <Exec>idx++</Exec>
            </Loop>
          </CustomListItems>-->
        </Expand>
      </Synthetic>
    </Expand>
  </Type>
  <Type Name="xziar::nailang::EvaluateContext::LocalFunc">
    <DisplayString>{{ LocalFunc[{Body->Name,s32}, {ArgNames.storage_.size_} args] }}</DisplayString>
    <Expand>
      <Item Name="[FuncBlock]">*Body</Item>
      <Item Name="[ArgNames]">ArgNames</Item>
    </Expand>
  </Type>
  <Type Name="xziar::nailang::CompactEvaluateContext" Inheritable="true">
    <DisplayString>{{ {Args.size()} vars, {LocalFuncs.size()} funcs }}</DisplayString>
    <Expand>
      <Synthetic Name="Variables">
        <Expand>
          <CustomListItems MaxItemsPerView="100">
            <Variable Name="idx" InitialValue="0" />
            <Size>Args.size()</Size>
            <Loop>
              <Break Condition="idx &gt;= Args.size()" />
              <Item Name="[{&amp;StrPool[0] + Args[idx].first.first,[Args[idx].first.second]s32}]">Args[idx].second</Item>
              <Exec>idx++</Exec>
            </Loop>
          </CustomListItems>
        </Expand>
      </Synthetic>
      <Synthetic Name="LocalFuncs">
        <Expand>
          <CustomListItems MaxItemsPerView="100">
            <Variable Name="idx" InitialValue="0" />
            <Size>LocalFuncs.size()</Size>
            <Loop>
              <Break Condition="idx &gt;= LocalFuncs.size()" />
              <Item Name="[{LocalFuncs[idx].first}]">LocalFuncs[idx].second</Item>
              <Exec>idx++</Exec>
            </Loop>
          </CustomListItems>
        </Expand>
      </Synthetic>
      <Item Name="Parent">ParentContext</Item>
      <Item Name="ReturnArg">ReturnArg</Item>
    </Expand>
  </Type>
  <Type Name="xziar::nailang::NailangRuntimeBase::FuncTarget">
    <DisplayString Condition="Pointer == 0"         >{{ Empty }}</DisplayString>
    <DisplayString Condition="Pointer &amp; Flag"   >{{ Meta }}</DisplayString>
    <DisplayString Condition="!(Pointer &amp; Flag)">{{ Block }}</DisplayString>
    <Expand>
      <Item Condition="Pointer &amp; Flag"    Name="[BlockContent]">*reinterpret_cast&lt;BlockContext*&gt;(Pointer &amp; InvFlag)</Item>
      <Item Condition="!(Pointer &amp; Flag)" Name="[BlockScope]"  >*reinterpret_cast&lt;BlockContext*&gt;(Pointer)</Item>
    </Expand>
  </Type>
  <Type Name="xziar::nailang::NailangRuntimeBase" Inheritable="true">
    <Expand>
      <Item Name="EvalContext">EvalContext</Item>
    </Expand>
  </Type>
  <Type Name="xziar::nailang::detail::ExceptionTarget">
    <DisplayString Condition="Target.index() == 0">{{ Empty }}</DisplayString>
    <DisplayString Optional="true" Condition="Target.index() == 2">{{ Arg [{Target._Tail._Tail._Head}] }}</DisplayString>
    <DisplayString Optional="true" Condition="Target.index() == 3">{{ RawArg [{Target._Tail._Tail._Head}] }}</DisplayString>
    <DisplayString Optional="true" Condition="Target.index() == 4">{{ FuncCall [{Target._Tail._Tail._Tail._Tail._Head->Name,s32}] }}</DisplayString>
    <DisplayString Optional="true" Condition="Target.index() == 5">{{ FuncCall [{Target._Tail._Tail._Tail._Tail._Tail._Head.Name,s32}] }}</DisplayString>
    <DisplayString Optional="true" Condition="Target.index() == 6">{{ RawBlock [{Target._Tail._Tail._Tail._Tail._Tail._Tail._Head->Name,s32}] }}</DisplayString>
    <DisplayString Optional="true" Condition="Target.index() == 7">{{ Block [{Target._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Head->Name,s32}] }}</DisplayString>
    <DisplayString Optional="true" Condition="Target.index() == 1 &amp;&amp; Target._Tail._Head.GetType() == BlockContent::Type::FuncCall">
      {{ FuncCall [Target._Tail._Head.Get&lt;BlockContent::Type::FuncCall&gt;()->Name,s32] }}
    </DisplayString>
    <DisplayString Optional="true" Condition="Target.index() == 1 &amp;&amp; Target._Tail._Head.GetType() == BlockContent::Type::Block">
      {{ Block [Target._Tail._Head.Get&lt;BlockContent::Type::Block&gt;()->Name,s32] }}
    </DisplayString>
    <DisplayString Optional="true" Condition="Target.index() == 1 &amp;&amp; Target._Tail._Head.GetType() == BlockContent::Type::RawBlock">
      {{ RawBlock [Target._Tail._Head.Get&lt;BlockContent::Type::RawBlock&gt;()->Name,s32] }}
    </DisplayString>
    <DisplayString Optional="true" Condition="Target.index() == 1 &amp;&amp; Target._Tail._Head.GetType() == BlockContent::Type::Assignment">
      {{ Assignment [Target._Tail._Head.Get&lt;BlockContent::Type::Assignment&gt;()->Variable.Name,s32] }}
    </DisplayString>
  </Type>
</AutoVisualizer>