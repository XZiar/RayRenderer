#include "common/CommonRely.hpp"

#define COMMON_SIMD_LV_NAMESPACE 1
#define COMMON_SIMD_LV 42
#if COMMON_COMPILER_MSVC
#   define __SSE4_2__ 1
#   define __SSE4_1__ 1
#   define __SSSE3__  1
#   define __SSE3__   1
#endif
#include "common/simd/SIMD.hpp"
#if COMMON_SIMD_LV_ < COMMON_SIMD_LV
#   error requires SIMDLV >= 41
#endif
#include "common/simd/SIMD128.hpp"

#define IMGU_FASTPATH_STB 1
#define STBIR_SSE2 1

#include "ColorConvert.inl"


DEFINE_FASTPATH_PARTIAL(ColorConvertor, SSE42)
{
    REGISTER_FASTPATH_VARIANTS(G8ToGA8,         SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(G8ToRGB8,        SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(G8ToRGBA8,       SIMD128, SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(GA8ToRGB8,       SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(GA8ToRGBA8,      SSSE3, LOOP);

    REGISTER_FASTPATH_VARIANTS(G16ToGA16,       SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(G16ToRGB16,      SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(G16ToRGBA16,     SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(GA16ToRGB16,     SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(GA16ToRGBA16,    SIMD128, LOOP);

    REGISTER_FASTPATH_VARIANTS(GfToGAf,         SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(GfToRGBf,        SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(GfToRGBAf,       SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(GAfToRGBf,       SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(GAfToRGBAf,      SIMD128, LOOP);

    REGISTER_FASTPATH_VARIANTS(RGB8ToRGBA8,     SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(BGR8ToRGBA8,     SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBA8ToRGB8,     SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBA8ToBGR8,     SSSE3, LOOP);

    REGISTER_FASTPATH_VARIANTS(RGB16ToRGBA16,   SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(BGR16ToRGBA16,   SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBA16ToRGB16,   SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBA16ToBGR16,   SSSE3, LOOP);

    REGISTER_FASTPATH_VARIANTS(RGBfToRGBAf,     SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(BGRfToRGBAf,     SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBAfToRGBf,     SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBAfToBGRf,     SSE41, LOOP);

    REGISTER_FASTPATH_VARIANTS(RGB8ToBGR8,      SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBA8ToBGRA8,    SIMD128, LOOP);

    REGISTER_FASTPATH_VARIANTS(RGB16ToBGR16,    SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBA16ToBGRA16,  SIMD128, LOOP);

    REGISTER_FASTPATH_VARIANTS(RGBfToBGRf,      SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBAfToBGRAf,    SIMD128, LOOP);

    REGISTER_FASTPATH_VARIANTS(RGB8ToR8,        SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGB8ToG8,        SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGB8ToB8,        SSE41, LOOP);

    REGISTER_FASTPATH_VARIANTS(RGB16ToR16,      SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGB16ToG16,      SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGB16ToB16,      SSE41, LOOP);

    REGISTER_FASTPATH_VARIANTS(RGBAfToRf,       SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBAfToGf,       SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBAfToBf,       SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBAfToAf,       SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBfToRf,        SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBfToGf,        SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGBfToBf,        SSSE3, LOOP);

    REGISTER_FASTPATH_VARIANTS(Extract8x2,      SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(Extract8x3,      SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(Extract8x4,      SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(Extract16x2,     SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(Extract16x3,     SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(Extract16x4,     SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(Extract32x2,     SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(Extract32x3,     SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(Extract32x4,     SSSE3, LOOP);

    REGISTER_FASTPATH_VARIANTS(Combine8x2,      SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(Combine8x3,      SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(Combine8x4,      SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(Combine16x2,     SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(Combine16x3,     SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(Combine16x4,     SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(Combine32x2,     SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(Combine32x3,     SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(Combine32x4,     SIMD128, LOOP);

    REGISTER_FASTPATH_VARIANTS(G8ToG16,         SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(G16ToG8,         SSSE3, LOOP);

    REGISTER_FASTPATH_VARIANTS(RGB555ToRGB8,    SSE41, LOOP, LOOP2);
    REGISTER_FASTPATH_VARIANTS(BGR555ToRGB8,    SSE41, LOOP, LOOP2);
    REGISTER_FASTPATH_VARIANTS(RGB555ToRGBA8,   SIMD128, LOOP, LOOP2);
    REGISTER_FASTPATH_VARIANTS(BGR555ToRGBA8,   SIMD128, LOOP, LOOP2);
    REGISTER_FASTPATH_VARIANTS(RGB5551ToRGBA8,  SIMD128, LOOP, LOOP2);
    REGISTER_FASTPATH_VARIANTS(BGR5551ToRGBA8,  SIMD128, LOOP, LOOP2);

    REGISTER_FASTPATH_VARIANTS(RGB565ToRGB8,    SSE41, LOOP, LOOP2);
    REGISTER_FASTPATH_VARIANTS(BGR565ToRGB8,    SSE41, LOOP, LOOP2);
    REGISTER_FASTPATH_VARIANTS(RGB565ToRGBA8,   SIMD128, LOOP, LOOP2);
    REGISTER_FASTPATH_VARIANTS(BGR565ToRGBA8,   SIMD128, LOOP, LOOP2);

    REGISTER_FASTPATH_VARIANTS(RGB10ToRGBf,     SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(BGR10ToRGBf,     SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGB10ToRGBAf,    SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(BGR10ToRGBAf,    SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(RGB10A2ToRGBAf,  SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(BGR10A2ToRGBAf,  SSE41, LOOP);
}

DEFINE_FASTPATH_PARTIAL(YCCConvertor, SSE42)
{
    REGISTER_FASTPATH_VARIANTS(RGB8ToYCbCr8Fast,    SSE41_I8, LOOP_I16);
    REGISTER_FASTPATH_VARIANTS(RGB8ToYCbCr8,        SSE41_I16_2, SSE41_I16, SSE41_F32, LOOP_I16); // FP32 is slow and no benefits
    REGISTER_FASTPATH_VARIANTS(RGBA8ToYCbCr8Fast,   SSE41_I8, LOOP_I16);
    REGISTER_FASTPATH_VARIANTS(RGBA8ToYCbCr8,       SSE41_I16_2, SSE41_I16, SSE41_F32, LOOP_I16); // FP32 is slow and no benefits
    REGISTER_FASTPATH_VARIANTS(YCbCr8ToRGB8,        SSE41_I16_2, SSE41_I16, SSE41_F32, LOOP_I16); // FP32 is slow and no benefits
    REGISTER_FASTPATH_VARIANTS(RGB8ToYCbCr8PlanarFast,  SSE41_I8, LOOP_I16);
    REGISTER_FASTPATH_VARIANTS(RGB8ToYCbCr8Planar,      SSE41_I16_2, SSE41_I16, SSE41_F32, LOOP_I16); // FP32 is slow and no benefits
    REGISTER_FASTPATH_VARIANTS(RGBA8ToYCbCr8PlanarFast, SSE41_I8, LOOP_I16);
    REGISTER_FASTPATH_VARIANTS(RGBA8ToYCbCr8Planar,     SSE41_I16_2, SSE41_I16, SSE41_F32, LOOP_I16); // FP32 is slow and no benefits
}

DEFINE_FASTPATH_PARTIAL(STBResize, SSE42)
{
    REGISTER_FASTPATH_VARIANTS(DoResize, SSE2);
}
