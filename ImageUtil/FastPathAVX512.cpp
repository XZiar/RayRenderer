#include "common/CommonRely.hpp"

#define COMMON_SIMD_LV_NAMESPACE 1
#define COMMON_SIMD_LV 320
#include "common/simd/SIMD.hpp"
#if COMMON_SIMD_LV_ < COMMON_SIMD_LV
#   error requires SIMDLV >= 320
#endif
#include "common/simd/SIMD128.hpp"
#include "common/simd/SIMD256.hpp"

#include "ColorConvert.inl"


DEFINE_FASTPATH_PARTIAL(ColorConvertor, AVX512)
{
    REGISTER_FASTPATH_VARIANTS(G8ToGA8,     AVX512VBMI2, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(G8ToRGB8,    AVX512VBMI, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(G8ToRGBA8,   AVX512VBMI, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(GA8ToRGBA8,  AVX512VBMI, AVX512BW);

    REGISTER_FASTPATH_VARIANTS(G16ToGA16,    AVX512BW);
    REGISTER_FASTPATH_VARIANTS(G16ToRGB16,   AVX512BW);
    REGISTER_FASTPATH_VARIANTS(G16ToRGBA16,  AVX512BW);
    REGISTER_FASTPATH_VARIANTS(GA16ToRGB16,  AVX512BW);
    REGISTER_FASTPATH_VARIANTS(GA16ToRGBA16, AVX512BW);

    REGISTER_FASTPATH_VARIANTS(GfToGAf,     AVX512BW);
    REGISTER_FASTPATH_VARIANTS(GfToRGBf,    AVX512BW);
    REGISTER_FASTPATH_VARIANTS(GfToRGBAf,   AVX512BW);
    REGISTER_FASTPATH_VARIANTS(GAfToRGBf,   AVX512BW);
    REGISTER_FASTPATH_VARIANTS(GAfToRGBAf,  AVX512BW);

    REGISTER_FASTPATH_VARIANTS(RGB8ToRGBA8, AVX512VBMI2, AVX512VBMI);
    REGISTER_FASTPATH_VARIANTS(RGBA8ToRGB8, AVX512VBMI2, AVX512VBMI);

    REGISTER_FASTPATH_VARIANTS(RGB16ToRGBA16, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(BGR16ToRGBA16, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGBA16ToRGB16, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGBA16ToBGR16, AVX512BW);

    REGISTER_FASTPATH_VARIANTS(RGBfToRGBAf, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(BGRfToRGBAf, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGBAfToRGBf, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGBAfToBGRf, AVX512BW);

    REGISTER_FASTPATH_VARIANTS(RGB8ToBGR8,   AVX512VBMI);
    REGISTER_FASTPATH_VARIANTS(RGBA8ToBGRA8, AVX512VBMI);

    REGISTER_FASTPATH_VARIANTS(RGB16ToBGR16,   AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGBA16ToBGRA16, AVX512BW);

    REGISTER_FASTPATH_VARIANTS(RGBfToBGRf,   AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGBAfToBGRAf, AVX512BW);

    REGISTER_FASTPATH_VARIANTS(RGB8ToR8,    AVX512VBMI2, AVX512VBMI, AVX2);
    REGISTER_FASTPATH_VARIANTS(RGB8ToG8,    AVX512VBMI2, AVX512VBMI, AVX2);
    REGISTER_FASTPATH_VARIANTS(RGB8ToB8,    AVX512VBMI2, AVX512VBMI, AVX2);

    REGISTER_FASTPATH_VARIANTS(RGB16ToR16,  AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGB16ToG16,  AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGB16ToB16,  AVX512BW);

    REGISTER_FASTPATH_VARIANTS(RGBAfToRf,   AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGBAfToGf,   AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGBAfToBf,   AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGBAfToAf,   AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGBfToRf,    AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGBfToGf,    AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGBfToBf,    AVX512BW);

    REGISTER_FASTPATH_VARIANTS(Extract8x2,  AVX512VBMI2, AVX512VBMI, AVX512BW2, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(Extract8x3,  AVX512VBMI2, AVX512VBMI, AVX2);
    REGISTER_FASTPATH_VARIANTS(Extract8x4,  AVX512VBMI2, AVX512VBMI, AVX512BW2, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(Extract16x2, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(Extract16x3, AVX512BW, AVX2);
    REGISTER_FASTPATH_VARIANTS(Extract16x4, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(Extract32x2, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(Extract32x3, AVX512BW, AVX2);
    REGISTER_FASTPATH_VARIANTS(Extract32x4, AVX512BW);

    REGISTER_FASTPATH_VARIANTS(Combine8x2,  AVX512BW);
    REGISTER_FASTPATH_VARIANTS(Combine8x3,  AVX512VBMI, AVX2);
    REGISTER_FASTPATH_VARIANTS(Combine8x4,  AVX512BW);
    REGISTER_FASTPATH_VARIANTS(Combine16x2, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(Combine16x3, AVX512BW, AVX2);
    REGISTER_FASTPATH_VARIANTS(Combine16x4, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(Combine32x2, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(Combine32x3, AVX512BW, AVX2);
    REGISTER_FASTPATH_VARIANTS(Combine32x4, AVX512BW);

    REGISTER_FASTPATH_VARIANTS(G8ToG16,     AVX512VBMI, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(G16ToG8,     AVX512VBMI, AVX512BW);

    REGISTER_FASTPATH_VARIANTS(RGB555ToRGB8,   AVX512VBMI, AVX512VBMI_2, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(BGR555ToRGB8,   AVX512VBMI, AVX512VBMI_2, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGB555ToRGBA8,  AVX512BW, AVX512VBMI_2);
    REGISTER_FASTPATH_VARIANTS(BGR555ToRGBA8,  AVX512BW, AVX512VBMI_2);
    REGISTER_FASTPATH_VARIANTS(RGB5551ToRGBA8, AVX512BW, AVX512VBMI_2);
    REGISTER_FASTPATH_VARIANTS(BGR5551ToRGBA8, AVX512BW, AVX512VBMI_2);

    REGISTER_FASTPATH_VARIANTS(RGB565ToRGB8,   AVX512VBMI, AVX512VBMI_2, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(BGR565ToRGB8,   AVX512VBMI, AVX512VBMI_2, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGB565ToRGBA8,  AVX512BW, AVX512VBMI_2);
    REGISTER_FASTPATH_VARIANTS(BGR565ToRGBA8,  AVX512BW, AVX512VBMI_2);

    REGISTER_FASTPATH_VARIANTS(RGB10ToRGBf,    AVX512BW);
    REGISTER_FASTPATH_VARIANTS(BGR10ToRGBf,    AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGB10ToRGBAf,   AVX512BW);
    REGISTER_FASTPATH_VARIANTS(BGR10ToRGBAf,   AVX512BW);
    REGISTER_FASTPATH_VARIANTS(RGB10A2ToRGBAf, AVX512BW);
    REGISTER_FASTPATH_VARIANTS(BGR10A2ToRGBAf, AVX512BW);
}

DEFINE_FASTPATH_PARTIAL(YCCConvertor, AVX512)
{
    REGISTER_FASTPATH_VARIANTS(RGB8ToYCbCr8, AVX512VBMI_I8, AVX512VBMI_I8DP4A, AVX512VBMI_I16); // I8DP4A has too many shuffle usage
}
