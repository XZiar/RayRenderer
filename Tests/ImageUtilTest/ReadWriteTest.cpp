#include "rely.h"
#include "ImageUtil/ImageUtilRely.h"
#include "ImageUtil/ColorConvert.h"
#include "ImageUtil/ImageSupport.hpp"
#include "SystemCommon/MiniLogger.h"
#include "SystemCommon/Format.h"
#include "SystemCommon/FormatInclude.h"
#include "SystemCommon/StringConvert.h"
#include "common/MemoryStream.hpp"
#include <algorithm>

#if COMMON_COMPILER_CLANG
#   pragma clang diagnostic push
#   pragma clang diagnostic ignored "-Wmissing-braces"
#endif

static constexpr uint32_t Ref_RGBA[35][35][1] =
{
    // row 0
    0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,
    // row 1
    0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff000000,0xff000000,0xff000000,0xff000000,0xff7f007f,0xff7f007f,0xffdd9bff,0xff7f007f,0xff00d8ff,0xff00d8ff,0xff00d8ff,0xff00d8ff,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xffffffff,0xff000000,0xff00ff00,
    // row 2
    0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff000000,0xff000000,0xff000000,0xff000000,0xff7f007f,0xff7f007f,0xff7f007f,0xff7f007f,0xff00d8ff,0xff00d8ff,0xff00d8ff,0xff00d8ff,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xffffffff,0xff000000,0xff00ff00,
    // row 3
    0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff000000,0xff000000,0xff000000,0xff000000,0xff7f007f,0xff7f007f,0xff7f007f,0xff7f007f,0xff00d8ff,0xff00d8ff,0xff00d8ff,0xff00d8ff,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xffffffff,0xff000000,0xff00ff00,
    // row 4
    0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff000000,0xff000000,0xff000000,0xff000000,0xff7f007f,0xffdd9bff,0xff7f007f,0xff7f007f,0xff00d8ff,0xff00d8ff,0xff00d8ff,0xff00d8ff,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xffffffff,0xff000000,0xff00ff00,
    // row 5
    0xff000000,0xff000000,0xff000000,0xff000000,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xffff7f7f,0xffff7f7f,0xffff7f7f,0xffff7f7f,0xff7f7fff,0xff7f7fff,0xff7f7fff,0xff7f7fff,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffffffff,0xff000000,0xff00ff00,
    // row 6
    0xff000000,0xff000000,0xff000000,0xff000000,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xffff7f7f,0xffff7f7f,0xffff7f7f,0xffff7f7f,0xff7f7fff,0xff7f7fff,0xff7f7fff,0xff7f7fff,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffffffff,0xff000000,0xff00ff00,
    // row 7
    0xff000000,0xff000000,0xff000000,0xff000000,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xffff7f7f,0xffff7f7f,0xffff7f7f,0xffff7f7f,0xff7f7fff,0xff7f7fff,0xff7f7fff,0xff7f7fff,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffffffff,0xff000000,0xff00ff00,
    // row 8
    0xff000000,0xff000000,0xff000000,0xff000000,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xffff7f7f,0xffff7f7f,0xffff7f7f,0xffff7f7f,0xff7f7fff,0xff7f7fff,0xff7f7fff,0xff7f7fff,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffffffff,0xff000000,0xff00ff00,
    // row 9
    0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xff7fffff,0xff7fffff,0xff7fffff,0xff7fffff,0x00000000,0x00000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x00000000,0x00000000,0xffff7fa3,0xffff7fa3,0xffff7fa3,0xffff7fa3,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xffffffff,0xff000000,0xff00ff00,
    // row 10
    0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xff7fffff,0xff7fffff,0xff7fffff,0xff7fffff,0x00000000,0x00000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x00000000,0x00000000,0xffff7fa3,0xffff7fa3,0xffff7fa3,0xffff7fa3,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xffffffff,0xff000000,0xff00ff00,
    // row 11
    0xffffff00,0xffffff00,0xffdd9bff,0xffffff00,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xff7fffff,0xff7fffff,0xff7fffff,0xff7fffff,0x00000000,0x00000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x00000000,0x00000000,0xffff7fa3,0xffff7fa3,0xffff7fa3,0xffff7fa3,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xffffffff,0xff000000,0xff00ff00,
    // row 12
    0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xff7fffff,0xff7fffff,0xff7fffff,0xff7fffff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xffff7fa3,0xffff7fa3,0xffff7fa3,0xffff7fa3,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xffffffff,0xff000000,0xff00ff00,
    // row 13
    0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0x00000000,0x00000000,0x00000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffff2600,0xffff2600,0xffff2600,0xffff2600,0xffff9400,0xffff9400,0xffff9400,0xff000000,0xffff7fa3,0xffff7fa3,0xffff7fa3,0xffff7fa3,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff00ff00,0xff00ff00,0xff00ff00,0xff00ff00,0xffffffff,0xff000000,0xff00ff00,
    // row 14
    0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0x00000000,0x00000000,0x00000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffff2600,0xffff2600,0xffff2600,0xffff2600,0xffff9400,0xffff9400,0xffff9400,0xffff9400,0xffff7fa3,0xffff7fa3,0xffff7fa3,0xffff7fa3,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff00ff00,0xff00ff00,0xff00ff00,0xff00ff00,0xffffffff,0xff000000,0xff00ff00,
    // row 15
    0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0x00000000,0x00000000,0x00000000,0x00000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffff2600,0xffff2600,0xffff2600,0xffff2600,0xffff9400,0xffff9400,0xffff9400,0xffff9400,0xffff7fa3,0xffdd9bff,0xffff7fa3,0xffff7fa3,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff00ff00,0xffdd9bff,0xff00ff00,0xff00ff00,0xffffffff,0xff000000,0xff00ff00,
    // row 16
    0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0x00000000,0x00000000,0x00000000,0xffffffff,0xffffffff,0xffffffff,0x00000000,0x00000000,0xffff2600,0xffff2600,0xffff2600,0xffff2600,0xffff9400,0xffff9400,0xffff9400,0xffff9400,0xffff7fa3,0xffdd9bff,0xffff7fa3,0xffff7fa3,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff00ff00,0xff00ff00,0xff00ff00,0xff00ff00,0xffffffff,0xff000000,0xff00ff00,
    // row 17
    0xff00ff00,0xff00ff00,0xff00ff00,0xff00ff00,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xffff2600,0xffff2600,0xffff2600,0xffff2600,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xffffffff,0xff000000,0xff00ff00,
    // row 18
    0xff00ff00,0xff00ff00,0xff00ff00,0xff00ff00,0xff6e00ff,0xffdd9bff,0xff6e00ff,0xff6e00ff,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xffff2600,0xffff2600,0xffff2600,0xffff2600,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xffffffff,0xff000000,0xff00ff00,
    // row 19
    0xff00ff00,0xff00ff00,0xff00ff00,0xff00ff00,0xff6e00ff,0xff6e00ff,0xffdd9bff,0xff6e00ff,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xffff2600,0xffff2600,0xffff2600,0xffff2600,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff808080,0xffffffff,0xff00ff00,
    // row 20
    0xff00ff00,0xff00ff00,0xff00ff00,0xff00ff00,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xff3f3f7f,0xffff2600,0xffff2600,0xffff2600,0xffff2600,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff0000ff,0xff0000ff,0xff0000ff,0xff0000ff,0xff808080,0xffffffff,0xff00ff00,
    // row 21
    0xff00d8ff,0xff00d8ff,0xff00d8ff,0xff00d8ff,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xffff9400,0xffff9400,0xffff9400,0xffff9400,0x00000000,0xffffffff,0x00000000,0x00000000,0xffffffff,0xffffffff,0x00000000,0x00000000,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7fffff,0xff7fffff,0xff7fffff,0xff7fffff,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xff808080,0xffffffff,0xff00ff00,
    // row 22
    0xff00d8ff,0xff00d8ff,0xff00d8ff,0xff00d8ff,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xffff9400,0xffff9400,0xffff9400,0xffff9400,0x00000000,0xffffffff,0x00000000,0x00000000,0xffffffff,0xffffffff,0x00000000,0x00000000,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7fffff,0xff7fffff,0xff7fffff,0xff7fffff,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xff808080,0xffffffff,0xff00ff00,
    // row 23
    0xff00d8ff,0xff00d8ff,0xff00d8ff,0xff00d8ff,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xffff9400,0xffff9400,0xffff9400,0xffff9400,0x00000000,0xffffffff,0x00000000,0x00000000,0x00000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7fffff,0xff7fffff,0xff7fffff,0xff7fffff,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xff808080,0xffffffff,0xff00ff00,
    // row 24
    0xff00d8ff,0xff00d8ff,0xff00d8ff,0xff00d8ff,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xff7a92ff,0xff000000,0xffff9400,0xffff9400,0xffff9400,0x00000000,0xffffffff,0x00000000,0x00000000,0x00000000,0xffffffff,0x00000000,0x00000000,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7fffff,0xff7fffff,0xff7fffff,0xff7fffff,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xff808080,0xffffffff,0xff00ff00,
    // row 25
    0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xff7f7fff,0xffffffff,0xff7f7fff,0xff7f7fff,0xffff7f7f,0xffffffff,0xffff7f7f,0xffff7f7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xff000000,0xff000000,0xff000000,0xff000000,0xff808080,0xffffffff,0xff00ff00,
    // row 26
    0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xff7f7fff,0xff7f7fff,0xff7f7fff,0xff7f7fff,0xffff7f7f,0xffff7f7f,0xffff7f7f,0xffff7f7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xff000000,0xff000000,0xff000000,0xff000000,0xff808080,0xffffffff,0xff00ff00,
    // row 27
    0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xff7f7fff,0xff7f7fff,0xff7f7fff,0xff7f7fff,0xffff7f7f,0xffff7f7f,0xffff7f7f,0xffff7f7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xff000000,0xff000000,0xffdd9bff,0xffdd9bff,0xff808080,0xffffffff,0xff00ff00,
    // row 28
    0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7f7fbe,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xff7fff7f,0xff7f7fff,0xff7f7fff,0xff7f7fff,0xff7f7fff,0xffff7f7f,0xffff7f7f,0xffff7f7f,0xffff7f7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffffff7f,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xff000000,0xff000000,0xff000000,0xff000000,0xff808080,0xffffffff,0xff00ff00,
    // row 29
    0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xff7f007f,0xff7f007f,0xff7f007f,0xff7f007f,0xff000000,0xff000000,0xff000000,0xff000000,0xff6e00ff,0xffdd9bff,0xffdd9bff,0xff6e00ff,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xffff2600,0xffff2600,0xffff2600,0xffff2600,0xff808080,0xffffffff,0xff00ff00,
    // row 30
    0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xff7f007f,0xff7f007f,0xff7f007f,0xff7f007f,0xff000000,0xff000000,0xff000000,0xff000000,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xffff2600,0xffff2600,0xffff2600,0xffff2600,0xff808080,0xffffffff,0xff00ff00,
    // row 31
    0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xff7f007f,0xff7f007f,0xff7f007f,0xff7f007f,0xff000000,0xff000000,0xff000000,0xff000000,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xffff2600,0xffff2600,0xffff2600,0xffff2600,0xff808080,0xffffffff,0xff00ff00,
    // row 32
    0xff8eff7f,0xff8eff7f,0xff8eff7f,0xff8eff7f,0xffff7fff,0xffff7fff,0xffff7fff,0xffff7fff,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xff7f007f,0xff7f007f,0xff7f007f,0xff7f007f,0xff000000,0xff000000,0xff000000,0xff000000,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff6e00ff,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xff7f7f7f,0xffff2600,0xffff2600,0xffff2600,0xffff2600,0xff808080,0xffffffff,0xff00ff00,
    // row 33
    0xff000000,0xff7fffd2,0xff7fffd2,0xff7fffd2,0xff7fffd2,0xff7fffd2,0xff7fffd2,0xff7fffd2,0xff7fffd2,0xff7fffd2,0xffed7fff,0xffed7fff,0xffed7fff,0xffed7fff,0xffed7fff,0xffed7fff,0xffed7fff,0xffed7fff,0xffed7fff,0xffed7fff,0xffed7fff,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xffffff00,0xff00ff00,
    // row 34
    0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xffff0000,0xff00ff00,
};

static constexpr uint8_t Ref_RGB[35][35][3] =
{
    // row 0
    0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,
    // row 1
    0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0xff,0x9b,0xdd,0x7f,0x00,0x7f,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 2
    0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 3
    0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 4
    0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x7f,0xff,0x9b,0xdd,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 5
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 6
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 7
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 8
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 9
    0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 10
    0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 11
    0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x9b,0xdd,0x00,0xff,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 12
    0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 13
    0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x00,0x00,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 14
    0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 15
    0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0xa3,0x7f,0xff,0xff,0x9b,0xdd,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0x00,0xff,0x00,0xff,0x9b,0xdd,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 16
    0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0xa3,0x7f,0xff,0xff,0x9b,0xdd,0xa3,0x7f,0xff,0xa3,0x7f,0xff,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 17
    0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 18
    0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0x00,0x6e,0xff,0x9b,0xdd,0xff,0x00,0x6e,0xff,0x00,0x6e,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
    // row 19
    0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x9b,0xdd,0xff,0x00,0x6e,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x80,0x80,0x80,0xff,0xff,0xff,0x00,0xff,0x00,
    // row 20
    0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x7f,0x3f,0x3f,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x80,0x80,0x80,0xff,0xff,0xff,0x00,0xff,0x00,
    // row 21
    0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x80,0x80,0x80,0xff,0xff,0xff,0x00,0xff,0x00,
    // row 22
    0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x80,0x80,0x80,0xff,0xff,0xff,0x00,0xff,0x00,
    // row 23
    0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x80,0x80,0x80,0xff,0xff,0xff,0x00,0xff,0x00,
    // row 24
    0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0xd8,0x00,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0xff,0x92,0x7a,0x00,0x00,0x00,0x00,0x94,0xff,0x00,0x94,0xff,0x00,0x94,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x80,0x80,0x80,0xff,0xff,0xff,0x00,0xff,0x00,
    // row 25
    0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0xff,0x7f,0x7f,0xff,0xff,0xff,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0x7f,0x7f,0xff,0xff,0xff,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0xff,0xff,0xff,0x00,0xff,0x00,
    // row 26
    0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0xff,0xff,0xff,0x00,0xff,0x00,
    // row 27
    0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x9b,0xdd,0xff,0x9b,0xdd,0x80,0x80,0x80,0xff,0xff,0xff,0x00,0xff,0x00,
    // row 28
    0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0xbe,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0x7f,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0xff,0xff,0xff,0x00,0xff,0x00,
    // row 29
    0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x6e,0xff,0x9b,0xdd,0xff,0x9b,0xdd,0xff,0x00,0x6e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x80,0x80,0x80,0xff,0xff,0xff,0x00,0xff,0x00,
    // row 30
    0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x80,0x80,0x80,0xff,0xff,0xff,0x00,0xff,0x00,
    // row 31
    0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x80,0x80,0x80,0xff,0xff,0xff,0x00,0xff,0x00,
    // row 32
    0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0x7f,0xff,0x8e,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0xff,0x7f,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x7f,0x00,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0xff,0x00,0x6e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x00,0x26,0xff,0x80,0x80,0x80,0xff,0xff,0xff,0x00,0xff,0x00,
    // row 33
    0x00,0x00,0x00,0xd2,0xff,0x7f,0xd2,0xff,0x7f,0xd2,0xff,0x7f,0xd2,0xff,0x7f,0xd2,0xff,0x7f,0xd2,0xff,0x7f,0xd2,0xff,0x7f,0xd2,0xff,0x7f,0xd2,0xff,0x7f,0xff,0x7f,0xed,0xff,0x7f,0xed,0xff,0x7f,0xed,0xff,0x7f,0xed,0xff,0x7f,0xed,0xff,0x7f,0xed,0xff,0x7f,0xed,0xff,0x7f,0xed,0xff,0x7f,0xed,0xff,0x7f,0xed,0xff,0x7f,0xed,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0xff,0x00,
    // row 34
    0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0xff,0x00,
};

#if COMMON_COMPILER_CLANG
#   pragma clang diagnostic pop
#endif

template<typename T>
class ImgTestSuite : public testing::Test
{
protected:
    const std::shared_ptr<const xziar::img::ImgSupport> Support;
public:
    static constexpr std::u16string_view Extension = T::Extension;
    static constexpr const char* SuiteName = T::SuiteName;
    static std::map<std::string_view, std::vector<std::string>, std::less<>>& GetVariants()
    {
        static std::map<std::string_view, std::vector<std::string>, std::less<>> variants;
        return variants;
    }
    ImgTestSuite(const std::shared_ptr<const xziar::img::ImgSupport>& support) : Support(support)
    { }
    static void SetUpTestSuite()
    {
        for (const auto& [k, v] : GetVariants())
        {
            std::string names;
            for (const auto& name : v)
            {
                if (!names.empty())
                    names.append(", ");
                names.append(name);
            }
            TestCout() << common::str::Formatter<char>{}.FormatStatic(FmtString("[{}.{}] get support: [{}]\n"), SuiteName, k, names);
        }
    }
};

#define ImgReadTestExt(ext) struct ImgSuiteRead##ext            \
{                                                               \
    static constexpr std::u16string_view Extension = u ## #ext; \
    static constexpr const char* SuiteName = "Read" #ext;       \
}

template<typename T, typename U>
static uint32_t RegisterSupportTest(const char* fileName, const int fileLine, std::string_view ftype, bool isRead)
{
    using namespace xziar::img;
    const auto supports = GetImageSupport(U::Extension, T::Type, isRead);
    auto& names = U::GetVariants()[ftype];
    for (const auto& support : supports)
    {
        const auto name = common::str::to_string(support->Name);
        names.push_back(name);
        const std::string testName = std::string(ftype) + "/" + name;
        testing::RegisterTest(
            U::SuiteName, testName.c_str(),
            nullptr, nullptr,
            fileName, fileLine,
            [=]() -> U* { return new T(support); }); // explicit cast to match testsuit id
    }
    return 0;
}

template<xziar::img::ImageDataType Type, typename T, uint32_t Width, uint32_t Height, uint32_t N>
static void TestRead(common::span<const std::byte> file, const T(&src)[Height][Width][N], const xziar::img::ImgSupport& support, std::u16string_view ext)
{
    constexpr auto ElementSize = xziar::img::Image::GetElementSize(Type);
    static_assert(ElementSize == sizeof(T) * N);
    common::io::MemoryInputStream input(file);
    common::str::Formatter<char> fmter{};
    try
    {
        const auto reader = support.GetReader(input, ext);
        const auto canRead = reader->Validate();
        common::mlog::SyncConsoleBackend();
        if (!canRead)
        {
            TestCout() << fmter.FormatDynamic("[{}] reports unsupported, skip\n", support.Name);
            return;
        }
        const auto img = reader->Read(Type);
        common::mlog::SyncConsoleBackend();
        if (img.GetSize() == 0)
        {
            TestCout() << fmter.FormatDynamic("[{}] fails to read, skip\n", support.Name);
            return;
        }
        EXPECT_EQ(img.GetWidth(), Width);
        EXPECT_EQ(img.GetHeight(), Height);
        EXPECT_EQ(img.GetDataType(), Type);
        EXPECT_EQ(img.GetSize(), ElementSize * Width * Height);
        if (img.GetSize() == ElementSize * Width * Height)
        {
            const auto data = img.AsSpan();
            const common::span<const std::byte> refspan = { reinterpret_cast<const std::byte*>(src), ElementSize * Width * Height };
            if (!std::equal(refspan.begin(), refspan.end(), data.begin(), data.end()))
            {
                for (uint32_t h = 0, idx = 0; h < Height; ++h)
                {
                    for (uint32_t w = 0; w < Width; ++w)
                    {
                        const auto& ref = src[h][w];
                        if constexpr (ElementSize == 1)
                        {
                            static_assert(std::is_same_v<T, uint8_t> && N == 1);
                            const auto ret = img.GetRawPtr<uint8_t>()[idx];
                            EXPECT_EQ(ret, ref[0]) << fmter.FormatStatic(FmtString("at [h{}, w{}, idx{}], get[{:02x}] ref[{:02x}]"), h, w, idx, ret, ref[0]);
                        }
                        else if constexpr (ElementSize == 2)
                        {
                            static_assert(std::is_same_v<T, uint16_t> && N == 1);
                            const auto ret = img.GetRawPtr<uint16_t>()[idx];
                            EXPECT_EQ(ret, ref[0]) << fmter.FormatStatic(FmtString("at [h{}, w{}, idx{}], get[{:04x}] ref[{:04x}]"), h, w, idx, ret, ref[0]);
                        }
                        else if constexpr (ElementSize == 4)
                        {
                            static_assert(std::is_same_v<T, uint32_t> && N == 1);
                            const auto ret = img.GetRawPtr<uint32_t>()[idx];
                            EXPECT_EQ(ret, ref[0]) << fmter.FormatStatic(FmtString("at [h{}, w{}, idx{}], get[{:08x}] ref[{:08x}]"), h, w, idx, ret, ref[0]);
                        }
                        else if constexpr (ElementSize == 3)
                        {
                            static_assert(std::is_same_v<T, uint8_t> && N == 3);
                            const common::span<const uint8_t> ret = { &img.GetRawPtr<uint8_t>()[idx * 3], 3 };
                            EXPECT_THAT(ret, testing::ElementsAreArray(ref)) << fmter.FormatStatic(FmtString("at [h{}, w{}, idx{}], get[{:02x} {:02x} {:02x}] ref[{:02x} {:02x} {:02x}]"),
                                h, w, idx, ret[0], ret[1], ret[2], ref[0], ref[1], ref[2]);
                        }
                        else
                        {
                            static_assert(!common::AlwaysTrue<T>);
                        }
                        idx++;
                    }
                }
            }
        }
    }
    catch (const common::BaseException& be)
    {
        EXPECT_TRUE(false) << common::str::to_string(be.Message());
    }
    catch (const std::exception& ex)
    {
        EXPECT_TRUE(false) << ex.what();
    }
    catch (...)
    {
        EXPECT_TRUE(false) << "unrecognized failure";
    }
}


template<typename T, xziar::img::ImageDataType DT, auto Ref>
struct ImgReadFixture : public ImgTestSuite<T>
{
    static constexpr xziar::img::ImageDataType Type = DT;
    void Test(common::span<const std::byte> file) const
    {
        TestRead<DT>(file, *Ref, *this->Support, T::Extension);
    }
    void Test(int32_t id) const
    {
        Test(common::ResourceHelper::GetData(L"IMG", id));
    }
    using ImgTestSuite<T>::ImgTestSuite;
};

#define IMG_TEST_(name, ext, ftype, otype)                                  \
struct name ## _ ## Fixture : public ImgReadFixture                         \
    <ImgSuiteRead##ext, xziar::img::ImageDataType::otype, &Ref_ ## otype>   \
{                                                                           \
    using ImgReadFixture::ImgReadFixture;                                   \
    void TestBody() override;                                               \
};                                                                          \
static uint32_t Dummy_ ## name = RegisterSupportTest<name ## _ ## Fixture,  \
    ImgTestSuite<ImgSuiteRead##ext>>(__FILE__, __LINE__,  #ftype, true);    \
void name ## _ ## Fixture::TestBody()
#define IMG_TEST(ext, ftype, otype) IMG_TEST_(Read ## ext ## ftype, ext, ftype, otype)


ImgReadTestExt(BMP);
ImgReadTestExt(PNG);
ImgReadTestExt(TGA);


IMG_TEST(BMP, RGBA, RGBA)
{
    Test(IDR_IMG_BMP_RGBA);
}

IMG_TEST(PNG, RGBA, RGBA)
{
    Test(IDR_IMG_PNG_RGBA);
}

IMG_TEST(TGA, RGBA, RGBA)
{
    Test(IDR_IMG_TGA_RGBA);
    Test(IDR_IMG_TGA_RLE_RGBA);
}

IMG_TEST(BMP, RGB, RGB)
{
    Test(IDR_IMG_BMP_RGB);
}

IMG_TEST(PNG, RGB, RGB)
{
    Test(IDR_IMG_PNG_RGB);
}

IMG_TEST(TGA, RGB, RGB)
{
    Test(IDR_IMG_TGA_RGB);
    Test(IDR_IMG_TGA_RLE_RGB);
}