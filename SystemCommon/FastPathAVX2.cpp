#include "common/CommonRely.hpp"

#define COMMON_SIMD_LV_NAMESPACE 1
#define COMMON_SIMD_LV 200
#include "common/simd/SIMD.hpp"
#if COMMON_SIMD_LV_ < COMMON_SIMD_LV
#   error requires SIMDLV >= 200
#endif
#include "common/simd/SIMD128.hpp"
#include "common/simd/SIMD256.hpp"

#include "CopyExIntrin.inl"
#include "MiscIntrins.inl"


DEFINE_FASTPATH_PARTIAL(CopyManager, AVX2)
{
    REGISTER_FASTPATH_VARIANTS(Broadcast2, AVX, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(Broadcast4, AVX, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(ZExtCopy12, AVX2, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(ZExtCopy14, AVX2, SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(ZExtCopy24, AVX2, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(ZExtCopy28, AVX2, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(ZExtCopy48, AVX2, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(SExtCopy12, AVX2, SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(SExtCopy14, AVX2, SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(SExtCopy24, AVX2, SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(SExtCopy28, AVX2, SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(SExtCopy48, AVX2, SSE41, LOOP);
    REGISTER_FASTPATH_VARIANTS(TruncCopy21, AVX2, SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(TruncCopy41, AVX2, SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(TruncCopy42, AVX2, SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(TruncCopy81, AVX2, SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(TruncCopy82, AVX2, SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(TruncCopy84, AVX2, SSSE3, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtI32F32, AVX,  SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtI16F32, AVX2, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtI8F32,  AVX2, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtU32F32, AVX2, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtU16F32, AVX2, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtU8F32,  AVX2, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtF32I32, AVX,  SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtF32I16, AVX2, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtF32I8,  AVX2, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtF32U16, AVX2, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtF32U8,  AVX2, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtF16F32, F16C, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtF32F16, F16C, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtF32F64, AVX, SIMD128, LOOP);
    REGISTER_FASTPATH_VARIANTS(CvtF64F32, AVX, SIMD128, LOOP);
}

DEFINE_FASTPATH_PARTIAL(MiscIntrins, AVX2)
{
    REGISTER_FASTPATH_VARIANTS(LeadZero32, LZCNT, COMPILER);
    REGISTER_FASTPATH_VARIANTS(LeadZero64, LZCNT, COMPILER);
    REGISTER_FASTPATH_VARIANTS(TailZero32, TZCNT, COMPILER);
    REGISTER_FASTPATH_VARIANTS(TailZero64, TZCNT, COMPILER);
    REGISTER_FASTPATH_VARIANTS(PopCount32, POPCNT, COMPILER, NAIVE);
    REGISTER_FASTPATH_VARIANTS(PopCount64, POPCNT, COMPILER, NAIVE);
    REGISTER_FASTPATH_VARIANTS(PopCounts, AVX2);
    REGISTER_FASTPATH_VARIANTS(Hex2Str, SSSE3, NAIVE);
    REGISTER_FASTPATH_VARIANTS(PauseCycles, WAITPKG, SSE2, COMPILER);
}

DEFINE_FASTPATH_PARTIAL(DigestFuncs, AVX2)
{
    REGISTER_FASTPATH_VARIANTS(Sha256, SHANIAVX2, SHANI, NAIVE);
}
