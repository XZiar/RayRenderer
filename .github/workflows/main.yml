# This is a basic workflow to help you get started with Actions

name: CI

env:
  boost_ver1: "1_77_0"
  boost_ver2: "1.77.0"
  ispc_ver: "1.16.1"

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ $default-branch ]
  pull_request:
    branches: [ $default-branch ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  download_dep:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Make temp dir
        run: |
          mkdir tmp
          mkdir ~/dependency
          cd ~/dependency
          mkdir include
          mkdir bin

      - name: Cache boost library
        id: cache-boost
        uses: actions/cache@v2
        with:
          path: ~/dependency/include/boost
          key: cache-boost-${{ env.boost_ver1 }}
        
      - name: Download boost library
        if: ${{steps.cache-boost.outputs.cache-hit != 'true'}}
        working-directory: ./tmp
        run: |
          wget --no-show-progress -O boost.tar.bz2 https://boostorg.jfrog.io/artifactory/main/release/${{env.boost_ver2}}/source/boost_${{env.boost_ver1}}.tar.bz2
          tar xjf boost.tar.bz2
          mv ./boost_${{env.boost_ver1}}/boost ~/dependency/include/
          
      - name: Cache ispc
        id: cache-ispc
        uses: actions/cache@v2
        with:
          path: ~/dependency/bin/ispc
          key: cache-ispc-${{ env.ispc_ver }}
        
      - name: Download ispc library
        if: ${{steps.cache-ispc.outputs.cache-hit != 'true'}}
        working-directory: ./tmp
        run: |
          wget --no-show-progress -O ispc.tar.gz https://github.com/ispc/ispc/releases/download/v${{env.ispc_ver}}/ispc-v${{env.ispc_ver}}-linux.tar.gz
          mkdir ispc
          tar xzf ispc.tar.gz -C ./ispc
          mv ./ispc ~/dependency/bin/

  build:
    needs: download_dep
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        cxx: [gcc8, gcc9, gcc10, clang9, clang10, clang11]
        include:
          - cxx: gcc8
            env_cc: "gcc-8"
            env_asm: "g++-8"
            env_cpp: "g++-8"
            env_stalink: "gcc-ar-8"
            env_dynlink: "g++-8"
            env_applink: "g++-8"
            env_module: "all"
            env_clang: false
            pkg: "g++-8"
          - cxx: gcc9
            env_cc: "gcc-9"
            env_asm: "g++-9"
            env_cpp: "g++-9"
            env_stalink: "gcc-ar-9"
            env_dynlink: "g++-9"
            env_applink: "g++-9"
            env_module: "all"
            env_clang: false
            pkg: "g++-9"
          - cxx: gcc10
            env_cc: "gcc-10"
            env_asm: "g++-10"
            env_cpp: "g++-10"
            env_stalink: "gcc-ar-10"
            env_dynlink: "g++-10"
            env_applink: "g++-10"
            env_module: "all"
            env_clang: false
            pkg: "g++-10"
          - cxx: clang9
            env_cc: "clang-9"
            env_asm: "clang++-9"
            env_cpp: "clang++-9"
            env_stalink: "ar"
            env_dynlink: "clang++-9"
            env_applink: "clang++-9"
            env_module: "all"
            env_clang: true
            env_clang_ver: 9
            pkg: "clang-9 lld-9"
          - cxx: clang10
            env_cc: "clang-10"
            env_asm: "clang++-10"
            env_cpp: "clang++-10"
            env_stalink: "ar"
            env_dynlink: "clang++-10"
            env_applink: "clang++-10"
            env_module: "all"
            env_clang: true
            env_clang_ver: 10
            pkg: "clang-10 lld-10"
          - cxx: clang11
            env_cc: "clang-11"
            env_asm: "clang++-11"
            env_cpp: "clang++-11"
            env_stalink: "ar"
            env_dynlink: "clang++-11"
            env_applink: "clang++-11"
            env_module: "all"
            env_clang: true
            env_clang_ver: 11
            pkg: "clang-11 lld-11"
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: "true"
          
      - name: Make temp dir
        run: |
          echo "ubt_codename=$(lsb_release -c -s)" >> $GITHUB_ENV
          echo "ubt_release=$(lsb_release -r -s)" >> $GITHUB_ENV
          mkdir tmp
          mkdir ~/dependency
          cd ~/dependency
          mkdir include
          mkdir bin
          echo "CPP_DEPENDENCY_PATH=$(pwd)" >> $GITHUB_ENV
          
      # - name: Prepare for clang
      #   if: ${{matrix.env_clang}}
      #   working-directory: ./tmp
      #   run: |
      #     wget --no-show-progress -O - https://apt.llvm.org/llvm-snapshot.gpg.key 2>/dev/null | sudo apt-key add -
      #     CLANG_REPO="deb http://apt.llvm.org/$(lsb_release -c -s)/ llvm-toolchain-$(lsb_release -c -s)-${{matrix.env_clang_ver}} main"
      #     echo $CLANG_REPO
      #     sudo add-apt-repository "$CLANG_REPO" -y

      - name: Install packages
        run: | 
          sudo apt update -q
          [[ $(echo "$ubt_release >= 19.10" | bc -l) = 0 ]] && lrlver="7" || lrlver="8"
          sudo apt install util-linux nasm unzip python3 python3-pip ${{matrix.pkg}}
          sudo apt install libreadline$lrlver libreadline-dev libx11-dev libx11-xcb-dev libxkbcommon-dev libxkbcommon-x11-dev libgl1-mesa-dev libglu1-mesa-dev libxi-dev libxxf86vm-dev
          python3 -m pip install chardet

      - name: Cache boost library
        id: cache-boost
        uses: actions/cache@v2
        with:
          path: ~/dependency/include/boost
          key: cache-boost-${{ env.boost_ver1 }}
          
      - name: Cache ispc
        id: cache-ispc
        uses: actions/cache@v2
        with:
          path: ~/dependency/bin/ispc
          key: cache-ispc-${{ env.ispc_ver }}
              
      - name: Setup environment
        run: |
          echo $CPP_DEPENDENCY_PATH
          echo "ISPCCOMPILER=$(find ~/dependency/bin -type f -name ispc)" >> $GITHUB_ENV
          echo $ISPCCOMPILER
          echo "CCOMPILER=${{matrix.env_cc}}" >> $GITHUB_ENV
          echo "ASMCOMPILER=${{matrix.env_asm}}" >> $GITHUB_ENV
          echo "CPPCOMPILER=${{matrix.env_cpp}}" >> $GITHUB_ENV
          echo "STATICLINKER=${{matrix.env_stalink}}" >> $GITHUB_ENV
          echo "DYNAMICLINKER=${{matrix.env_dynlink}}" >> $GITHUB_ENV
          echo "APPLINKER=${{matrix.env_applink}}" >> $GITHUB_ENV
          
      - name: List verbose info
        run: |
          $ISPCCOMPILER --version
          $CPPCOMPILER --version
          python3 --version
          nasm -v
          lscpu

      - name: Build Debug modules
        run: |
          python3 xzbuild rebuild "${{matrix.env_module}},-curl,-libressl,-BasicsTest,-SystemCommonTest,-NailangTest,-NullTest,-Blur" /threads=x1.5 /dsymlv=0

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - uses: actions/upload-artifact@v2
        with:
          name: debug-${{matrix.cxx}}-${{steps.date.outputs.date}}
          path: x64/Debug
          retention-days: 3
          
      - name: Build Release modules
        run: |     
          python3 xzbuild rebuildall "BasicsTest,SystemCommonTest,NailangTest" Release /threads=x1.5 /dsymlv=0
          
      - name: Run Tests
        run: |            
          ./x64/Release/BasicsTest
          ./x64/Release/SystemCommonTest
          ./x64/Release/NailangTest

      - uses: actions/upload-artifact@v2
        with:
          name: release-${{matrix.cxx}}-${{steps.date.outputs.date}}
          path: x64/Release
          retention-days: 3
