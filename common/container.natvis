<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  
  <Type Name="common::StringPool&lt;*&gt;">
    <Intrinsic Name="GetStr" Expression="&amp;this->Pool[0] + offset">
      <Parameter Type="size_t" Name="offset"/>
    </Intrinsic>
    <DisplayString>{{ {Pool.size()} chars }}</DisplayString>
  </Type>

  <Type Name="common::container::FrozenDenseSet&lt;*&gt;">
    <DisplayString>{{ {Data.size()} elements }}</DisplayString>
    <Expand>
      <Item Name="size">Data.size()</Item>
      <IndexListItems>
        <Size>Data.size()</Size>
        <ValueNode>Data[$i]</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>
  <Type Name="common::container::FrozenDenseStringSet&lt;*,*&gt;">
    <Intrinsic Name="StrPtr" Expression="Pool.GetStr(OrderedView[idx].Offset)">
      <Parameter Type="size_t" Name="idx"/>
    </Intrinsic>
    <Intrinsic Name="StrLen" Expression="OrderedView[idx].Length">
      <Parameter Type="size_t" Name="idx"/>
    </Intrinsic>
    <DisplayString>{{ {Pieces.size()} strings, {Pool.Pool.size()} chars }}</DisplayString>
    <Expand>
      <Item Name="size">Pieces.size()</Item>
      <IndexListItems>
        <Size>Pieces.size()</Size>
        <ValueNode Condition="std::is_same&lt;$T1,char    &gt;::value">StrPtr($i),[StrLen($i)]s</ValueNode>
        <ValueNode Condition="std::is_same&lt;$T1,char16_t&gt;::value">StrPtr($i),[StrLen($i)]su</ValueNode>
        <ValueNode Condition="std::is_same&lt;$T1,char32_t&gt;::value">StrPtr($i),[StrLen($i)]s32</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  
  <Type Name="common::container::IntrusiveDoubleLinkList&lt;*,*&gt;">
    <Expand>
      <LinkedListItems>
        <HeadPointer>*($T1 **)&amp;Head</HeadPointer>
        <!--<HeadPointer>Head._Storage._Value</HeadPointer>-->
        <NextPointer>Next</NextPointer>
        <ValueNode>this</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  
  <Type Name="common::container::TrunckedContainer&lt;*&gt;::Trunk">
    <DisplayString>Trunk {{ {Offset} used, {Avaliable} unused }}</DisplayString>
  </Type>
  <Type Name="common::container::TrunckedContainer&lt;*&gt;">
    <DisplayString>{{ {Trunks.size()} trunk }}</DisplayString>
    <Expand>
      <CustomListItems MaxItemsPerView="100">
        <Variable Name="idx" InitialValue="0" />
        <Variable Name="idx0" InitialValue="0" />
        <Variable Name="idx1" InitialValue="0" />
        <Loop>
          <Break Condition="idx0 == Trunks.size()" />
          <If Condition="idx1 &lt; Trunks[idx0].Offset">
            <Item Name="[{idx}]&lt;{idx0},{idx1}&gt;">Trunks[idx0].Ptr[idx1]</Item>
            <Exec>idx++</Exec>
            <Exec>idx1++</Exec>
          </If>
          <If Condition="idx1 &gt;= Trunks[idx0].Offset">
            <Exec>idx1 = 0</Exec>
            <Exec>idx0++</Exec>
          </If>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
  
  
  <Type Name="common::container::ResourceDict::RawItem">
    <Intrinsic Name="NotEmpty" Expression="Len != (size_t)(-1)"/>
    <Intrinsic Name="GetLen" Expression="Len &amp; common::container::ResourceDict::SizeMask"/>
    <Intrinsic Name="Type" Expression="Val.type()" />
    <DisplayString ExcludeView="DictItem">{{ [{Key,[GetLen()]sb}] {Val} }}</DisplayString>
    <!--<DisplayString IncludeView="DictItem" Condition="Val.type() == " >{Val}</DisplayString>-->
    <DisplayString IncludeView="DictItem">{Val}</DisplayString>
  </Type>
  <Type Name="common::container::ResourceDict">
    <DisplayString>{UsedSlot} element</DisplayString>
    <Expand>
      <CustomListItems MaxItemsPerView="100">
        <Variable Name="idx0" InitialValue="0" />
        <Variable Name="idx1" InitialValue="0" />
        <Loop>
          <Break Condition="idx0 == Items.Trunks.size()" />
          <If Condition="idx1 &lt; Items.Trunks[idx0].Offset">
            <Item Condition="Items.Trunks[idx0].Ptr[idx1].NotEmpty()"
                  Name="[{Items.Trunks[idx0].Ptr[idx1].Key,[Items.Trunks[idx0].Ptr[idx1].GetLen()]sb}]">
              Items.Trunks[idx0].Ptr[idx1],view(DictItem)
            </Item>
            <Exec>idx1++</Exec>
          </If>
          <If Condition="idx1 &gt;= Items.Trunks[idx0].Offset">
            <Exec>idx1 = 0</Exec>
            <Exec>idx0++</Exec>
          </If>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
</AutoVisualizer>